from linked_list.ListNode import ListNode
from linked_list.LinkedList import LinkedList

class Solution(object):
    ###################################################################################################################
    ###################################################################################################################
    ############################################ REVERSE SINGLY LINKED LIST 206 #######################################
    ###################################################################################################################
    ###################################################################################################################
    def reverseList(self, head: ListNode) -> ListNode:
        if head is None: return None
        curr = head.next
        prev = head
        prev.next = None
        while curr:
            after = curr.next
            curr.next = prev
            prev = curr
            curr = after
        return prev

    ###################################################################################################################
    ###################################################################################################################
    ############################################ HAS CYCLE 141 ########################################################
    ###################################################################################################################
    ###################################################################################################################
    def hasCycle(self, head: ListNode) -> bool:
        if head is None: return False
        p_slow = head
        p_fast = head.next
        while p_slow is not None and p_fast is not None:
            if p_slow is not p_fast:
                p_slow = p_slow.next
                if p_fast.next is not None:
                    p_fast = p_fast.next.next
                else:
                    p_fast = None
            elif p_slow is p_fast:
                return True
        return False

    ###################################################################################################################
    ###################################################################################################################
    ############################################ MERGE TWO SORTED LISTS 21 ############################################
    ###################################################################################################################
    ###################################################################################################################

    def mergeTwoLists(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        runner1 = l1
        runner2 = l2
        head = ListNode(0)
        prev = head

        while (runner1 and runner2):
            if runner1.val > runner2.val:
                newNode = ListNode(runner2.val)
                runner2 = runner2.next
            else:
                newNode = ListNode(runner1.val)
                runner1 = runner1.next
            prev.next = newNode
            prev = newNode

        prev.next = runner1 or runner2

        return head.next

if __name__ == "__main__":
    ###################################################################################################################
    ###################################################################################################################
    ############################################ REVERSE SINGLY LINKED LIST 206 #######################################
    ###################################################################################################################
    ###################################################################################################################
    s = Solution()
    ll = LinkedList([1, 2, 3, 4, 5])
    head = s.reverseList(ll.root)
    ll.print_list(head)

    ###################################################################################################################
    ###################################################################################################################
    ############################################ HAS CYCLE 141 ########################################################
    ###################################################################################################################
    ###################################################################################################################

    ll = LinkedList([1])
    print(s.hasCycle(ll.root))

    ###################################################################################################################
    ###################################################################################################################
    ############################################ MERGE TWO SORTED LISTS 21 ############################################
    ###################################################################################################################
    ###################################################################################################################